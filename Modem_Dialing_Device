调制解调器拨号器
	与调制解调器相关的程序要处理如此种类多的调制解调器很困难。
	在大多数UNIX系统中总有两个程序来处理调制解调器。
	第一个是远程登陆程序，它允许我们拨通另外的计算机、登陆和使用远程系统。
	另一个使用调制解调器的程序是uucico，它是UUCP包的一部分。



	程序设计
		分析一下调制解调器拨号器所具有的特性：
	 	（1）它必须在不改动源码的情况下支持新增加的调制解调器类型。
		（2）一定要使用一些特定形式的锁，以保证当那些持有锁的程序在非正常结束时能制动释放的锁。
		（3）新的程序一定要能够使用我们所开发的所有特性。
		（4）客户机程序，例如cu和tip，不应当需要特别权限


				客户机-服务器工作模式的结构
                                       (2)                  (3)拨号调制解调器
      Systems、Devices和Dialers文件 ———————————> 服务器 <———————————————————————> 调制解调器
						 ↑  |                               |
			(1)请求访问远程系统      |  |（4）返回文件描述符            |
						 |  ↓                               |
						客户机    <—————————————————————————
								(5)与远程系统通信
		建立与远程系统的通信过程如下；
		(1)起动服务器
		（2）客户机起动，使用cli_conn函数建立于服务器的连接。
		（3）服务器读取Systems、Devices和Dialers配置文件来决定如何拨号远程系统。
		（4）服务器打开该调制解调器设备并拨号该调制解调器。
		（5）如果拨号成功，服务器返回一个该调制解调器设备的文件描述符给客户机。
		（6）客户机直接与远程系统通信。




	数据文件
		Systems、Devices和Dialers
		主要介绍了这些函数的域的信息


	
	服务器设计
		两个因素影响服务器的设计
		（1）拨号过程可能会延续一段时间，所有服务器一定要创建一个子进程来处理实际的拨号。
		（2）服务器的精灵进程一定要管理所有的加锁。


						   父进程                       子进程
						                    fork                  拨号命令
	Systems,Devices和Dialers文件  ————————>  服务器w/lock表   ———————————>  服务器 <————————————> 调制解调器
				                      ↑	          <———————————
						 请求 |		     exit状态
				                      |  _________________|
						        ↓
						    客户机

					图  调制解调器拨号器的工作过程
		工作过程如下：
		（1）父进程在服务器的众所周知处接受从客户机发来的请求。
		（2）基于客户机要联系的远程系统的名字，父进程查询Systems文件和Devices文件找到匹配项。
		（3）如果发现匹配项，则fork一个出子进程来进行实际的拨号。
		（4）子进程结束时，会发送信号SIGCHLD通知父进程。


	客户机设计
		客户机生成一个命令行，发送到服务器，然后收到一个文件描述符或者一个错误信息。
