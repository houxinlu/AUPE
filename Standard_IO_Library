第五章 标准IO库
	
	引言

		本章说明标准I/O库。因为不仅在UNIX而且在很多操作系统上都实现此库，所有它由ANSIC标准说明。标准I/O库处理很多细节，例如缓存分配，以优化长度执行I/O等。这样使用户不必            担心如何选择使用正确的块长度。标准I/O库是在系统调用函数基础上构造的，它便于用户使用，但是如果不较深入地了解库的操作，也会带来一些问题。



	流和FILE对象
		所有的I/O函数都是针对文件描述符的。
		当用标准I/O库打开或创建一个文件时，我们已使一个流与一个文件相结合。
		当打开一个流时，标准I/O函数fopen返回一个指向FILE对象的指针。该对象通常是一个结构，它包含了I/O库为管理该流所需要的所有信息：用于实际I/O的
		文件描述符，指向流缓存的指针，缓存的长度，当前在缓存中的字符数，出错标志等等。
		应用程序没有必要检验FILE对象。为了引用一个流，需将FILE指针作为参数传递给每个标准I/O函数。在本书中，我们称指向FILE对象的指针(类型为FILE*)为文件指针。


	标准输入、标准输出和标准出错

		在3.2节中，我们曾用文件描述符STDIN_FILENO,STDOUT_FILENO和STDERR_FILENO分别表示它们。
		这三个标准I/O流通过预定义文件指针stdin,stdout和stderr加以引用。这三个文件指针同样定义在头文件<stdio.h>



	缓存
		标准I/O提供缓存的目的是尽可能减少使用read和write调用的数量。它也对每个I/O流自动地进行缓存管理，避免了应用程序需要考虑这一点所带来的麻烦。

		标准I/O提供了三种类型的缓存：
		（1）全缓存。这种情况下，当填满标准I/O缓存后才进行实际I/O操作。对于驻在磁盘上的文件通常是由标准I/O库实施全缓存的。
		     术语刷新（flush）说明标准I/O缓存的写操作。缓存可由标准I/O例程自动地刷新，或者可以调用函数fflush刷新一个流。
		     在UNIX环境中，刷新有两种意思。在标准I/O库方面，刷新意味着将缓存中的内容写到磁盘上。
						   在终端驱动程序方面，刷新表示丢弃已存在缓存中的数据。
		（2）行缓存。在这种情况下，当在输入和输出中遇到新行符时，标准I/O库执行I/O操作。这允许我们一次输出一个字符（用标准I/O fputc函数），但只有
		     在写了一行之后才进行实际I/O操作。
		     对于行缓存有两个限制。第一个是：因为标准I/O库用来收集每一行的缓存的长度是固定的，所以只要填满了缓存，那么即使还没有写一个新行符，
		     也进行I/O操作。第二个是:任何适合只要通过标准输入输出库要求从(a)一个不带缓存的流，或者(b)一个行缓存的流（它预先要求从内核得到数据）得到
		     输入数据，那么就会造成刷新所有行缓存输出流。在(b)中带了一个在括号中的说明的理由是，所需的数据可能已在该缓存中，他并不要求内核在需要该
		     数据时才进行该操作。很明显，从不带缓存的一个流中进行输入（(a)项）要求当时从内核得到数据。
		（3）不带缓存。标准I/O库不对字符进行缓存。如果用标准I/O函数写若干字符到不带缓存的流中，则相当于用write系统调用函数将这些字符写至相关联的打开
 		     文件上。标准出错流stderr通常是不带缓存的，这就使得出错信息可以尽快显示出来，而不管它们是否含有一个新行字符。
			ANSIC 要求下列缓存特征：
			（1）当且仅当标准输入和标准输出并不涉及交互作用设备时，它们才是全缓存的。
			（2）标准出错绝不会是全缓存的。

		对任何一个给定的流，如果不喜欢这些系统默认，则可调用下列两个函数中的一个更改缓存类型：
		    #include<stdio.h>
		
		    void  setbuf(FILE  *fp, char *buf);
		    int   setvbuf(FILE *fp, char *buf, int mode, size_t size);
		    这些函数一定要在流已被打开后调用。而且也应在对该流执行任何一个其他操作之前调用。

		    可以使用setbuf函数打开或关闭缓存机制。为了带缓存进行I/O，参数buf必须指向一个长度为BUFSIZ的缓存（该常数定义在<stdio.h>中）。
		    使用setvbuf，我们可以精确地说明所需的缓存类型。这是依靠mode参数实现的。
				_IOFBF   全缓存
				_IOLBF	 行缓存
			   	_IONBF	 不带缓存

			   表   setbuf和setvbuf函数
		函数	     mode	      buf             缓存及长度                  缓存的类型
		setbuf                       nonnull        长度为BUFSIZ的用户缓存       全缓存或行缓存
                                             NULL           （无缓存）                   不带缓存
			    _IOFBF           nonnull        长度为size的用户缓存         全缓存
                                             NULL           合适长度的系统缓存   
	        setvbuf     _IOLBF           nonnull        长度为size的用户缓存         行缓存
                                             NULL           合适长度的系统缓存 
		            _IONBF	     忽略           无缓存			 不带缓存
		要了解，如果在一个函数中分配一个自动变量类的标准I/O缓存，则从函数返回之前，必须关闭该流。

		任何时候，我们都可以强制刷新一个流。
		#include<stdio.h>
		
		int fflush(FIFE *fp);  
                此函数使该流所有未写的数据都被传递至内核。作为一种特殊情形，如若fp是NULL，则此函数刷新所有输出流。


			
	打开流
		下列三个函数可用于打开一个标准I/O流
		#include<stdio.h>

		FILE  *fopen(const  char  *pathname, const  char *type);
		
		FILE  *freopen(const  char  *pathname, const  char  *type, FILE *fp);

		FILE  *fdopen(int  filedes, const char *type);

		这三个函数的区别是：
		（1）fopen打开路径名由pathname指示的一个文件。
		（2）freopen在一个特定的流上（由fp指示）打开一个指定的文件（其路径名由pathname指示），如若该流已经打开，则先关闭该流。
                     此函数一般用于将一个指定的文件打开为一个预定义的流：标准输入、标准输出或标准出错。
		（3）fdopen取一个现存的文件描述符（我们可能从open,dup,dup2,fcntl或pipe函数得到此文件描述符），并使一个标准的I/O流与该描述符相结合。
		     此函数常用于由创建管道和网络通信通道函数获得的插述符。因为这些特殊类型的文件不能用标准I/Ofopen函数打开，首先必须先调用设备专用
		     函数以获得一个文件描述符，然后用fdopen使一个标准I/O流与该描述符相结合。

			type参数指定对该I/O流的读、写方式。
					  表1	打开标准I/O流的type参数
				type					说明
				r 或 rb					为读而打开
				w 或 wb					使文件成为0长，或为写而创建
				a 或 ab					添加：为在文件尾写而打开，或为写而创建
				r+ 或 r+b 或 rb+			为读和写而打开
				w+ 或 w+b 或 wb+			使文件为0长，或为读和写而打开
				a+ 或 a+b 或 ab+			为在文件尾读和写而打开或创建

		当以读和写类型打开一文件时（type中+号），具有下列限制：
		*如果中间没有fflush、fseel、fsetpos或rewind，则在输出的后面不能直接跟随输入。
		*如果中间没有fseek、fsetpos或rewind，或者一个输出操作没有达到文件尾端，则在输入操作之后不能直接跟随输出。


					表2    打开一个标准I/O流的六种不同的方式
			限制		r	w	a	r+	w+	a+
		文件必须已存在		*			*
		擦除文件以前的内容		*			*
		流可以读		*			*	*	*
		流可以写			*	*	*	*	*
		流只可在尾端处写			*			*


		fclose关闭一个打开的流
		#include<stdio.h>
		
		int  fclose(FILE *fp);
		在该文件被关闭之前，刷新缓存中的输出数据。缓存中的输入数据被丢弃。当一个进程正常终止（调用exit函数，或从main函数返回），则所有带未写缓存数据的标准I/O
             流都被刷新，所有打开的标准I/O流都被关闭。




	读和写流
		一旦打开了流，则可在三种不同类型的非格式化I/O中进行选择，对其进行读、写操作。
		（1）每次一个字符的I/O。一次读或写一个字符，如果流是带缓存的，则标准I/O函数处理所有缓存。
		（2）每次一行的I/O。使用fgets和fputs一次读或写一行。每行都以一个新行符终止。当调用fgets时，应说明能处理的最大行长。
		（3）直接I/O。fread和fwrite函数支持这种类型I/O。每次I/O操作读或写某种数量的对象，而每个对象具有指定的长度。这两个函数常用于从二进制文件中读或写一个结构。
		输入函数
			以下三个函数可用于一次读一个字符
			#include<stdio.h>
			int	getc(FILE  *fp);
			int     fgetc(FILE  *fp);
			int	getchar(void);

			函数getchar等同于getc(stdin)
			getc可被实现为宏，而fgetc则不能实现为宏。
			（1）getc的参数不应当是具有副作用的表达式。
			（2）因为fgetc一定是个函数，所以可以得到其地址。这就允许将fgetc的地址作为一个参数传给另一个函数。
			（3）调用fgetc所需时间很可能长于调用getc，因为调用函数通常所需的时间长于调用宏。

			注意，不管是出错还是到达文件尾端，这三个函数都返回同样的值。为了区分这两种不同的情况，必须调用ferror或feof。
			#include<stdio.h>
			int ferrror(FILE *fp);
			int feof(FILE *fp);
		
			void clearerr(FILE *fp);
			大多数实现的FILE对象中，为每个流保持了两个标志： *出错标志  *文件结束标志  调用clearerr则清除这两个标志。
		
			从一个流读之后，可以调用ungetc将字符再送回流中。
			#include<stdio.h>
		
			int ungetc(int c, FILE *fp);
			送回到流中的字符以后又可以从流中读出，但读出字符的顺序与送回的顺序相反。

		输入函数
			对应于上面所述的每个输入函数都有一个输出函数
			#include<stdio.h>
			
			int putc(int c, FILE *fp);
			int fputc(int c, FILE *fp);
			int putchar(int c);
			与输入函数一样,putchar(c)等同于putc(c,stdout),putc可被实现为宏，而fputc则不能实现为宏，而fputc则不能实现为宏。

	每次一行I/O
		下面两个函数提供每次输入一行的功能
		#include<stdio.h>
		
		char	*fgets(char *buf, int n, FILE *fp);
		char	*gets(char *buf);
		两个函数都指定了缓存地址，读入的行将送入其中。gets从标准输入读，而fgets则从指定的流读。
		对于fgets，必须指定缓存的长度n。  gets是一个不推荐使用的函数。
		
		#include<stdio.h>
		
		int   fputs(const  char *str, FILE *fp);
		int   puts(const  char *str);
		函数fputs将一个以null符终止的字符串写到指定的流，终止符null不写出。
		puts将一个以null符终止的字符串写到标准输出，终止符不写出。但是还是不建议使用它

	

	标准I/O的效率
				使用标准I/O例程得到的时间结果
		函数		用户CPU（秒）		  系统CPU（秒）            时钟时间（秒）          程序正文字节数
	     最佳时间    	  0.0			      0.3			0.3
	     fgets,fputs	  2.2 			      0.3		        2,6 		        184
	     getc,putc            4.3			      0.3			4.8			384
	    fgetc,fputc		  4.6			      0.3			5.0			152
	    单字节时间		 23.8			     397.9		      423.4

		使用标准I/O例程的一个优点是无需考虑缓存及最佳I/O长度的选择。在使用fgets时需要考虑最大行长，但是最佳I/O长度的选择要方便得多。



	二进制I/O
		因为结构中可能遇到null字节，fputs遇到null字节时就停止。所以 下面两个函数以执行二进制I/O操作。
		#include<stdio.h>
		
		size_t	fread(void *ptr, size_t size, size_t nobj, FILE *fp)
		size_t	fwrite(const void *ptr, size_t size, suze_t nobj，FILE *fp);

		这些函数有两个常见的用法：
		（1）读或写一个二进制数组。其中，指定size为每个数组元素的长度，nobj为欲写的元素数。
		（2）读或写一个结构。其中，指定size为结构的长度，nobj为1。
		 将这两个例子结合起来就可读或写一个结构数组。为了做到这一点，size应当是该结构的sizeof,nobj应是该数组中的元素数。
		 fread和fwrite返回读或写的对象数。
		
		使用二进制I/O的基本问题是，它只能用于读已写在同一系统上的数据。



	定位流
		有两种方法定位标准I/O流
		（1）ftell和fseel。
		（2）fgetpos和fsetpos。这两个函数是新由ANSIC引入的。它们引进了一个新的抽象数据类型fpos_t，它记录文件的位置。

			需要移植到非UNIX系统上运行的应用程序应当使用fgetpos和fsetpos。
			#include<stdio.h>
			
			long ftell(FILE *fp);
			int fseek(FILE *fp, long offset, int whence);

			void rewind(FILE *fp);
			对于一个二进制文件，其位置指示器是从文件起始位置开始度量，并以字节为计量单位的。但是对于文本文件，它们的文件当前位置可能不以简单的字节位移量来度量。
			
			fgetpos将文件位置指示器的当前值存入由pos指向的对象中。
			#include<stdio.h>
			
			int  fgetpos(FILE  *fp, fpos_t  *pos);
			int  fsetpos(FILE  *fp, const  fpos_t  *pos);



	格式化I/O
		格式化输出
			执行格式化输出处理的是三个printf函数
			#include<stdio.h>
		
			int printf(const  char  *format, ...);

			int fprintf(FILE *fp, const  char  *format, ...);

			int sprintf(char *buf, const char *format, ...);
		
		printf将格式化数据写到标准输出，fprintf写至指定的流，sprint将格式化的字符送入数组buf中。
		sprint在该数组的尾端自动加一个null字节，但该字节不包括在返回值中。

		还有三种printf族的变体类似于上面的三种，但是可变参数表(...)代换成了arg。
			#include<stdarg.h>
			#include<stdio.h>

			int vprintf(const char *format, va_list arg);

			int vfprintf(FILE *fp, const char *format, va_list arg);

			int vsprintf(char *buf, const char *format, va_list arg);


	
	格式化输入
		执行格式化输入处理的是三个scanf函数
		#include<stdio.h>
			
		int scanf(const char *format, ...);
		
		int fscanf(FILE *fp, const char *format, ...);

		int sscanf(const char *buf, const char *format, ...);



	临时文件
		标准I/O库提供了两个函数以帮助创建临时文件。
		#include<stdio.h>
		
		char  *tmpnam(char *ptr);

		FILE  *tmpfile(void);

		tmpnam产生一个与现在文件名不同的一个有效路径名字符串。每次调用它时，它都产生一个不同的路径名，最多调用次数是TMP_MAX
		tmpfile创建一个临时二进制文件(类型wb+),在关闭该文件或程序结束时将自动删除这种文件。

		对一个文件解除连接并不删除其内容，关闭该文件时才删除其内容。
		tempnam是tmpnam的一个变体，它允许调用者为所产生的路径名指定目录和前缀。
		#include<stdio.h>
		
		char    *tempnam(const char *diretory, const char *prefix);
		对于目录由四种不同的选择，并且使用第一个为真的作为目录：
		（1）如果定义了环境变量TMPDIR，则用其作为目录。
		（2）如果参数directory非NULL，则用其作为目录。
		（3）将<stdio.h>中的字符串P_tmpdir用作为目录。
		（4）将本地目录，通常是/tmp，用作为目录。



	标准I/O的替代软件

		标准I/O并不完善。在标准I/O库中，一个效路不高的不足之处是需要复制的数据量。当使用每次一行函数fgets和fputs时，通常需要复制两次数据。
			标准I/O库的替代版   快速I/O库中的fio避免了上述缺陷；另外一种代替版：sfio；还有一种代换软件包，它使用了映照文件-mmap函数，该新软件包称为ASI
		

		
